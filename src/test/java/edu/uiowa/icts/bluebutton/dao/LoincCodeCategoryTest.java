package edu.uiowa.icts.bluebutton.dao;

/*
 * #%L
 * blue-button Spring MVC Web App
 * %%
 * Copyright (C) 2014 - 2015 University of Iowa Institute for Clinical and Translational Science (ICTS)
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;

import edu.uiowa.icts.bluebutton.domain.LabTest;
import edu.uiowa.icts.bluebutton.domain.LoincCodeCategory;
import edu.uiowa.icts.bluebutton.json.CombinedLoincCodeList;
import edu.uiowa.icts.bluebutton.json.LoincCode;
import edu.uiowa.icts.spring.*;

import org.json.JSONObject;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.web.WebAppConfiguration;

/**
 * Unit test Template
 * Generated by Protogen
 * @since 01/27/2015 10:53:12 CST
 */
@WebAppConfiguration
public class LoincCodeCategoryTest extends AbstractSpringTestCase {

    @Autowired
    private BluebuttonDaoService bluebuttonDaoService;

    @Before
    public void setUp() throws Exception {
    	super.setUp();
    }

    @After
    public void tearDown() throws Exception {
    	super.tearDown();
    }
    
    @Test
    public void CSVImportShouldLoadLoincTestCategories() throws IOException {
    	assertEquals( 0, this.bluebuttonDaoService.getLoincCodeCategoryService().count() );
    	
    	File file = new File("src/test/resources/csv/LOINC_250_MULTI-AXIAL_HIERARCHY-for-testing.CSV");
		this.bluebuttonDaoService.getLoincCodeCategoryService().importCSV(new FileInputStream(file));
		
    	assertEquals( 74, this.bluebuttonDaoService.getLoincCodeCategoryService().count() );
    	
    	LoincCodeCategory lccRoot = this.bluebuttonDaoService.getLoincCodeCategoryService().findByProperty("loincCode", "LP31755-9");
    	assertEquals("Microbiology", lccRoot.getName());
    	assertNull(lccRoot.getRootCategoryName());
    	assertNull(lccRoot.getSubrootCategoryName());
    	
    	LoincCodeCategory lccHEMOGLOBINA1C = this.bluebuttonDaoService.getLoincCodeCategoryService().findByProperty("loincCode", "4548-4");
    	assertEquals("Hgb A1c MFr Bld", lccHEMOGLOBINA1C.getName());
    	assertEquals("Hematology", lccHEMOGLOBINA1C.getRootCategoryName());
    	assertEquals("Hematology", lccHEMOGLOBINA1C.getSubrootCategoryName());
    	
    	LoincCodeCategory lccBacteria = this.bluebuttonDaoService.getLoincCodeCategoryService().findByProperty("loincCode", "LP98185-9");
    	assertEquals("Bacteria", lccBacteria.getName());
    	assertEquals("Microbiology", lccBacteria.getRootCategoryName());
    	assertEquals("Microorganism", lccBacteria.getSubrootCategoryName());
    	
    /*	LoincCodeCategory lccBacteriaTwo = this.bluebuttonDaoService.getLoincCodeCategoryService().findByProperty("loincCode", "LP14082-9");
    	assertEquals("Bacteria", lccBacteriaTwo.getName());
    	assertEquals("Microbiology", lccBacteriaTwo.getRootCategoryName());
    	assertEquals("Microorganism", lccBacteriaTwo.getSubrootCategoryName()); */
    	
    	LoincCodeCategory lccBacteriaPericardiafluid = this.bluebuttonDaoService.getLoincCodeCategoryService().findByProperty("loincCode", "LP52257-0");
    	assertEquals("Bacteria | Pericardial fluid", lccBacteriaPericardiafluid.getName());
    	assertEquals("Microbiology", lccBacteriaPericardiafluid.getRootCategoryName());
    	assertEquals("Microorganism", lccBacteriaPericardiafluid.getSubrootCategoryName());
    	
    }

    @Test 
    public void findByLoincCodesShouldReturnCategorieNames(){
    	LoincCodeCategory llc1 = new LoincCodeCategory();
    	llc1.setLoincCode("1234-5");
    	llc1.setRootCategoryName("test root");
    	llc1.setSubrootCategoryName("test sub name");
    	
    	this.bluebuttonDaoService.getLoincCodeCategoryService().save(llc1);
    	
    	List<LoincCode> list= this.bluebuttonDaoService.getLoincCodeCategoryService().findByLoincCodes("1234-5");
    	HashMap<String, LoincCode> combinedList = new CombinedLoincCodeList(list, null).getCombinedHash();

    	assertNotNull(list);
    	assertTrue(combinedList.containsKey("1234-5"));
    	assertEquals("test sub name", combinedList.get("1234-5").getSubRootName());

    }
    
    @Test 
    public void findByLoincCodesShouldReturnCategorieNamesTwoObjects(){
    	LoincCodeCategory llc1 = new LoincCodeCategory();
    	llc1.setLoincCode("1234-5");
    	llc1.setRootCategoryName("test root");
    	llc1.setSubrootCategoryName("test sub name");
    	
    	LoincCodeCategory llc1Two = new LoincCodeCategory();
    	llc1Two.setLoincCode("1234-6");
    	llc1Two.setRootCategoryName("test root also");
    	llc1Two.setSubrootCategoryName("test sub name also");
    	
    	this.bluebuttonDaoService.getLoincCodeCategoryService().save(llc1);
    	this.bluebuttonDaoService.getLoincCodeCategoryService().save(llc1Two);
    	
    	List<LoincCode> list = this.bluebuttonDaoService.getLoincCodeCategoryService().findByLoincCodes("1234-5,1234-6");
    	assertNotNull(list);
    	HashMap<String, LoincCode> combinedList = new CombinedLoincCodeList(list, null).getCombinedHash();

    	assertEquals("test sub name", combinedList.get("1234-5").getSubRootName());
    	
    	assertEquals("test sub name also", combinedList.get("1234-6").getSubRootName());

    }
    
    @Test 
    public void findByLoincCodesShouldReturnCategorieNamesThreeObjects(){
    	LoincCodeCategory llc1 = new LoincCodeCategory();
    	llc1.setLoincCode("1234-5");
    	llc1.setRootCategoryName("test root");
    	llc1.setSubrootCategoryName("test sub name");
    	
    	LoincCodeCategory llc1Two = new LoincCodeCategory();
    	llc1Two.setLoincCode("1234-6");
    	llc1Two.setRootCategoryName("test root also");
    	llc1Two.setSubrootCategoryName("test sub name also");
    	
    	LoincCodeCategory llc1Three = new LoincCodeCategory();
    	llc1Three.setLoincCode("1234-7");
    	llc1Three.setRootCategoryName("test root also three");
    	llc1Three.setSubrootCategoryName("test sub name also three");
    	
    	this.bluebuttonDaoService.getLoincCodeCategoryService().save(llc1);
    	this.bluebuttonDaoService.getLoincCodeCategoryService().save(llc1Two);
    	this.bluebuttonDaoService.getLoincCodeCategoryService().save(llc1Three);
    	
    	List<LoincCode> list = this.bluebuttonDaoService.getLoincCodeCategoryService().findByLoincCodes("1234-5,1234-6,1234-7");
    	HashMap<String, LoincCode> combinedList = new CombinedLoincCodeList(list, null).getCombinedHash();

    	assertNotNull(list);
    	
    	assertEquals("test sub name", combinedList.get("1234-5").getSubRootName());
    	
    	assertEquals("test sub name also", combinedList.get("1234-6").getSubRootName());

    	assertEquals("test sub name also three", combinedList.get("1234-7").getSubRootName());
    	
    }
    
    @Test 
    public void findByLoincCodesShouldReturnEmptyJSONWithFourEmptyLoincList(){
    	LoincCodeCategory llc1 = new LoincCodeCategory();
    	llc1.setLoincCode("1234-5");
    	llc1.setRootCategoryName("test root");
    	llc1.setSubrootCategoryName("test sub name");
    	
    	LoincCodeCategory llc1Two = new LoincCodeCategory();
    	llc1Two.setLoincCode("1234-6");
    	llc1Two.setRootCategoryName("test root also");
    	llc1Two.setSubrootCategoryName("test sub name also");
    	
    	LoincCodeCategory llc1Three = new LoincCodeCategory();
    	llc1Three.setLoincCode("1234-7");
    	llc1Three.setRootCategoryName("test root also three");
    	llc1Three.setSubrootCategoryName("test sub name also three");
    	
    	this.bluebuttonDaoService.getLoincCodeCategoryService().save(llc1);
    	this.bluebuttonDaoService.getLoincCodeCategoryService().save(llc1Two);
    	this.bluebuttonDaoService.getLoincCodeCategoryService().save(llc1Three);
    	
    	List<LoincCode> list = this.bluebuttonDaoService.getLoincCodeCategoryService().findByLoincCodes("");
    	assertNotNull(list);
    	HashMap<String, LoincCode> combinedList = new CombinedLoincCodeList(list, null).getCombinedHash();

    	
    	assertFalse( combinedList.containsKey("1234-5"));
    	assertFalse( combinedList.containsKey("1234-6"));
    	assertFalse( combinedList.containsKey("1234-7"));
      	
    }
}