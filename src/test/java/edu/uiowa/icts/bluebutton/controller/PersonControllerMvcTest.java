package edu.uiowa.icts.bluebutton.controller;

/*
 * #%L
 * blue-button Spring MVC Web App
 * %%
 * Copyright (C) 2014 - 2015 University of Iowa Institute for Clinical and Translational Science (ICTS)
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */


import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.UnsupportedEncodingException;

import org.hamcrest.core.IsNull;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import edu.uiowa.icts.bluebutton.dao.*;
import edu.uiowa.icts.bluebutton.domain.*;
import static org.hamcrest.Matchers.*; 
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertThat;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

/**
 * Generated by Protogen
 * @since Thu Apr 02 13:48:44 CDT 2015
 */
public class PersonControllerMvcTest extends AbstractControllerMVCTests {
	    
    private Person firstPerson;
    
    @Before
    public void setup() throws FileNotFoundException, IOException {
    	super.setup();
    	
              // add 20 records to test database
        for(int x=1; x<21; x++){
        	Person person = new Person();
        	bluebuttonDaoService.getPersonService().save(person);
	        if (x == 1){
	        	// use this ID for update, show, and delete assertions
	        	firstPerson = person;
	        	// add 20 clinical documents to test database
	            for(int y=1; y<21; y++){
	    	        ClinicalDocument cd = new ClinicalDocument();
	    	        String docString = "<xml><clinicaldocument>"+y+"</clinicaldocument>";
	    	        cd.setDocument(docString.getBytes("UTF-8"));
	    	        cd.setName("file"+ y+".xml");
	    	        cd.setPerson( firstPerson );
	    	        cd.setDescription("dev server #"+y);
	    	        this.bluebuttonDaoService.getClinicalDocumentService().saveOrUpdate(cd);
	    	        
	    	        firstPerson.getClinicalDocuments().add(cd);
	    	        this.bluebuttonDaoService.getPersonService().save(firstPerson);
	            }   
	        }
        }   
          }

    @Test
    @WithMockUser(username="user", roles={"BLUEBUTTON_ADMIN"})
    public void addShouldDisplayNewPersonForm() throws Exception {
       mockMvc.perform(get("/person/add"))
       .andExpect(status().isOk())
       .andExpect(model().attributeExists("person")) 
       .andExpect(view().name("/bluebutton/person/edit"));
    }
    
    @Test
    @WithMockUser(username="user", roles={"BLUEBUTTON_ADMIN"})
    public void listShouldSimplyLoadPage() throws Exception {
       mockMvc.perform(get("/person/list"))
       .andExpect(status().isOk())
       .andExpect(view().name("/bluebutton/person/list"));
    }
    
    @Test
    public void indexShouldDisplayListPage() throws Exception {
       mockMvc.perform(get("/person/"))
       .andExpect(status().isOk())
       .andExpect(view().name("/bluebutton/person/list"));
    }
    
    @Test
    @WithMockUser(username="user", roles={"BLUEBUTTON_ADMIN"})
    public void listAltShouldLoadListOfPersons() throws Exception {
       mockMvc.perform(get("/person/list_alt"))
       .andExpect(status().isOk())
       .andExpect(model().attributeExists("personList")) 
       .andExpect(view().name("/bluebutton/person/list_alt"));
    }
    
   	  
    @Test
    @WithMockUser(username="user", roles={"BLUEBUTTON_ADMIN"})
    public void saveShouldPersistAndRedirectToListView() throws Exception {
       int count = bluebuttonDaoService.getPersonService().list().size();
       
       mockMvc.perform(post("/person/save")).andExpect(status().is3xxRedirection()).andExpect(view().name("redirect:/person/list"));   
       
       assertEquals("Person count should increase by 1", count +1 , bluebuttonDaoService.getPersonService().list().size());
	}
  
    @Test
    @WithMockUser(username="user", roles={"BLUEBUTTON_ADMIN"})
    public void editShouldLoadObjectAndDisplayForm() throws Exception {
    	mockMvc.perform(get("/person/edit").param("personId", firstPerson.getPersonId().toString()))
         .andExpect(status().isOk())
         .andExpect(model().attributeExists("person")) 
         .andExpect(view().name("/bluebutton/person/edit"));
    }
    
    /*
     * test show
     */
    @Test
    public void showShouldRedirectToListPageForBogusId() throws Exception {
    	mockMvc.perform(get("/person/show").param("personId", "-1"))    	
    	.andExpect(status().is3xxRedirection())
    	.andExpect(view().name("redirect:/person/")); 
    }
    
    @Test
    public void showShouldLoadAndChartsForAllRecords() throws Exception {
    	mockMvc.perform(get("/person/show").param("personId", firstPerson.getPersonId().toString()))
         .andExpect(status().isOk())
       //  .andExpect(model().attributeExists("person")) 
         .andExpect(model().attributeExists("clinicalDocuments")) 
         .andExpect(model().attribute("clinicalDocuments", hasSize(20))) 
         .andExpect(view().name("/bluebutton/clinicaldocument/show"));    
    }
    
    @Test
    @WithMockUser(username="user", roles={"BLUEBUTTON_ADMIN"})
    public void deleteGetShouldLoadAndDisplayYesNoButtons() throws Exception {
    	mockMvc.perform(get("/person/delete").param("personId", firstPerson.getPersonId().toString()))
         .andExpect(status().isOk())
         .andExpect(model().attributeExists("person")) 
         .andExpect(view().name("/bluebutton/person/delete"));
    }
    
    @Test
    @WithMockUser(username="user", roles={"BLUEBUTTON_ADMIN"})
    public void deletePostSubmitYesShouldDeleteAndRedirectToListView() throws Exception {
    	Person person = new Person();
    	bluebuttonDaoService.getPersonService().save(person);
    	
        int count = bluebuttonDaoService.getPersonService().list().size();

       mockMvc.perform(post("/person/delete").param("personId", person.getPersonId().toString())
       .param("submit", "Yes")).andExpect(status().is3xxRedirection()).andExpect(view().name("redirect:/person/list"));  
       
       assertEquals("count should decrease by 1", count - 1 , bluebuttonDaoService.getPersonService().list().size());
    }
    
    @Test
    @WithMockUser(username="user", roles={"BLUEBUTTON_ADMIN"})
    public void deletePostSubmitNoShouldNotDeleteAndRedirectToListView() throws Exception {
        int count = bluebuttonDaoService.getPersonService().list().size();

       mockMvc.perform(post("/person/delete").param("personId", firstPerson.getPersonId().toString())
       .param("submit", "No")).andExpect(status().is3xxRedirection()).andExpect(view().name("redirect:/person/list"));  
       
       assertEquals("count should NOT decrease by 1", count , bluebuttonDaoService.getPersonService().list().size());
    }
      
    @Test
    public void defaultDatatableShouldReturnJSONDataWith10Rows() throws Exception {
    	mockMvc.perform(get("/person/datatable")
			.param("display", "list")
			.param("search[value]", "")
			.param("search[regex]", "false")
			.param("length", "10")
			.param("start", "0")
			.param("columnCount", "21")
			.param("draw", "1")
			.param("individualSearch", "true")
			.param("columns[0][data]","0").param("columns[0][name]","urls").param("columns[0][searchable]","false").param("columns[0][orderable]","false").param("columns[0][search][regex]","false").param("columns[0][search][value]","")
						.param("columns[1][data]","1").param("columns[1][name]","addressLineOne").param("columns[1][searchable]","true").param("columns[1][orderable]","true").param("columns[1][search][regex]","false").param("columns[1][search][value]","")
						.param("columns[2][data]","2").param("columns[2][name]","addressLineTwo").param("columns[2][searchable]","true").param("columns[2][orderable]","true").param("columns[2][search][regex]","false").param("columns[2][search][value]","")
						.param("columns[3][data]","3").param("columns[3][name]","city").param("columns[3][searchable]","true").param("columns[3][orderable]","true").param("columns[3][search][regex]","false").param("columns[3][search][value]","")
						.param("columns[4][data]","4").param("columns[4][name]","clinicalDocuments").param("columns[4][searchable]","true").param("columns[4][orderable]","true").param("columns[4][search][regex]","false").param("columns[4][search][value]","")
						.param("columns[5][data]","5").param("columns[5][name]","country").param("columns[5][searchable]","true").param("columns[5][orderable]","true").param("columns[5][search][regex]","false").param("columns[5][search][value]","")
						.param("columns[6][data]","6").param("columns[6][name]","credentialss").param("columns[6][searchable]","true").param("columns[6][orderable]","true").param("columns[6][search][regex]","false").param("columns[6][search][value]","")
						.param("columns[7][data]","7").param("columns[7][name]","dateOfBirth").param("columns[7][searchable]","true").param("columns[7][orderable]","true").param("columns[7][search][regex]","false").param("columns[7][search][value]","")
						.param("columns[8][data]","8").param("columns[8][name]","email").param("columns[8][searchable]","true").param("columns[8][orderable]","true").param("columns[8][search][regex]","false").param("columns[8][search][value]","")
						.param("columns[9][data]","9").param("columns[9][name]","firstLogin").param("columns[9][searchable]","true").param("columns[9][orderable]","true").param("columns[9][search][regex]","false").param("columns[9][search][value]","")
						.param("columns[10][data]","10").param("columns[10][name]","firstName").param("columns[10][searchable]","true").param("columns[10][orderable]","true").param("columns[10][search][regex]","false").param("columns[10][search][value]","")
						.param("columns[11][data]","11").param("columns[11][name]","lastLogin").param("columns[11][searchable]","true").param("columns[11][orderable]","true").param("columns[11][search][regex]","false").param("columns[11][search][value]","")
						.param("columns[12][data]","12").param("columns[12][name]","lastName").param("columns[12][searchable]","true").param("columns[12][orderable]","true").param("columns[12][search][regex]","false").param("columns[12][search][value]","")
						.param("columns[13][data]","13").param("columns[13][name]","lastUpdated").param("columns[13][searchable]","true").param("columns[13][orderable]","true").param("columns[13][search][regex]","false").param("columns[13][search][value]","")
						.param("columns[14][data]","14").param("columns[14][name]","message").param("columns[14][searchable]","true").param("columns[14][orderable]","true").param("columns[14][search][regex]","false").param("columns[14][search][value]","")
						.param("columns[15][data]","15").param("columns[15][name]","middleName").param("columns[15][searchable]","true").param("columns[15][orderable]","true").param("columns[15][search][regex]","false").param("columns[15][search][value]","")
						.param("columns[16][data]","16").param("columns[16][name]","registrationDate").param("columns[16][searchable]","true").param("columns[16][orderable]","true").param("columns[16][search][regex]","false").param("columns[16][search][value]","")
						.param("columns[17][data]","17").param("columns[17][name]","securityResponses").param("columns[17][searchable]","true").param("columns[17][orderable]","true").param("columns[17][search][regex]","false").param("columns[17][search][value]","")
						.param("columns[18][data]","18").param("columns[18][name]","signature").param("columns[18][searchable]","true").param("columns[18][orderable]","true").param("columns[18][search][regex]","false").param("columns[18][search][value]","")
						.param("columns[19][data]","19").param("columns[19][name]","state").param("columns[19][searchable]","true").param("columns[19][orderable]","true").param("columns[19][search][regex]","false").param("columns[19][search][value]","")
						.param("columns[20][data]","20").param("columns[20][name]","uuid").param("columns[20][searchable]","true").param("columns[20][orderable]","true").param("columns[20][search][regex]","false").param("columns[20][search][value]","")
						.param("columns[21][data]","21").param("columns[21][name]","zipcode").param("columns[21][searchable]","true").param("columns[21][orderable]","true").param("columns[21][search][regex]","false").param("columns[21][search][value]","")
						.accept(MediaType.APPLICATION_JSON))
    	.andExpect(status().isOk())
    	.andExpect(content().contentType("application/json"))
    	.andExpect(jsonPath("$.recordsTotal", is(bluebuttonDaoService.getPersonService().list().size())))
    	.andExpect(jsonPath("$.recordsFiltered", is(bluebuttonDaoService.getPersonService().list().size())))
    	.andExpect(jsonPath("$.draw", is("1")))
    	// max # of returned data rows should be 10 per "length" value
    	.andExpect(jsonPath("$.data", hasSize(is(10))))
    	.andExpect(jsonPath("$.data[0][0]", containsString("show?")))
		.andExpect(jsonPath("$.data[0][0]", containsString("edit?")))
		.andExpect(jsonPath("$.data[0][0]", not(containsString("delete?"))))
        ;
    }
    	  
    @Test
    public void defaultDatatableShouldReturnErrorTextForBogusColumnName() throws Exception {
    	mockMvc.perform(get("/person/datatable")
			.param("display", "list")
			.param("search[value]", "")
			.param("search[regex]", "false")
			.param("length", "10")
			.param("start", "1")
			.param("columnCount", "1")
			.param("draw", "1")
			.param("individualSearch", "true")
			.param("columns[0][data]","0").param("columns[0][name]","asdfasdf").param("columns[0][searchable]","true").param("columns[0][orderable]","true").param("columns[0][search][regex]","false").param("columns[0][search][value]","")
			.accept(MediaType.APPLICATION_JSON))
    	.andExpect(status().isOk())
    	.andExpect(content().contentType("application/json"))
    	.andExpect(jsonPath("$.recordsTotal", is(bluebuttonDaoService.getPersonService().list().size())))
    	.andExpect(jsonPath("$.recordsFiltered", is(bluebuttonDaoService.getPersonService().list().size())))
    	.andExpect(jsonPath("$.draw", is("1")))
    	.andExpect(jsonPath("$.data", hasSize(is(10))))
    	.andExpect(jsonPath("$.data[0][0]", is("[error: column asdfasdf not supported]")))
    	;
    }    
    	  
    @Test
    public void defaultDatatableShouldReturnException() throws Exception {
    	mockMvc.perform(get("/person/datatable")
			.param("display", "list")
			.param("search[value]", "")
			.param("search[regex]", "false")
			.param("length", "10")
			.param("start", "1")
			.param("columnCount", "1")
			.param("draw", "1")
			.param("individualSearch", "true")
			.param("order[0][column]","1").param(".order[0][dir]", "asc")
			.accept(MediaType.APPLICATION_JSON))
    	.andExpect(status().isOk())
    	.andExpect(content().contentType("application/json"))
    	.andExpect(jsonPath("$.recordsTotal", is(0)))
    	.andExpect(jsonPath("$.recordsFiltered", is(0)))
    	.andExpect(jsonPath("$.draw", is("1")))
    	.andExpect(jsonPath("$.data", IsNull.nullValue()))
    //	.andExpect(jsonPath("$.error", is("")))
    	;
    }      
          
    
}