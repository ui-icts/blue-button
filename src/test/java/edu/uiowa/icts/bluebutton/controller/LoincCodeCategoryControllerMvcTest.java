package edu.uiowa.icts.bluebutton.controller;

/*
 * #%L
 * blue-button Spring MVC Web App
 * %%
 * Copyright (C) 2014 - 2015 University of Iowa Institute for Clinical and Translational Science (ICTS)
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */


import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;

import org.hamcrest.core.IsNull;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.mock.web.MockMultipartFile;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMultipartHttpServletRequestBuilder;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import edu.uiowa.icts.bluebutton.dao.*;
import edu.uiowa.icts.bluebutton.domain.*;
import static org.hamcrest.Matchers.containsString;
import static org.hamcrest.Matchers.hasSize;
import static org.hamcrest.Matchers.is;
import static org.junit.Assert.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

/**
 * Generated by Protogen
 * @since Tue Jan 27 10:53:12 CST 2015
 */
public class LoincCodeCategoryControllerMvcTest extends AbstractControllerMVCTests {
	
    
    
    
    private LoincCodeCategory firstLoincCodeCategory;
    
    @Before
    public void setup() throws FileNotFoundException, IOException {

    	 super.setup();
              // add 20 records to test database
        for(int x=1; x<21; x++){
        	LoincCodeCategory loincCodeCategory = new LoincCodeCategory();
        	bluebuttonDaoService.getLoincCodeCategoryService().save(loincCodeCategory);
	        if (x == 1){
	        	// use this ID for update, show, and delete assertions
	        	firstLoincCodeCategory = loincCodeCategory;
	        }
        }   
          }

    @Test
	@WithMockUser(username="user", roles={"BLUEBUTTON_ADMIN"})
    public void addShouldDisplayNewLoincCodeCategoryForm() throws Exception {
       mockMvc.perform(get("/loinccodecategory/add"))
       .andExpect(status().isOk())
       .andExpect(model().attributeExists("loincCodeCategory")) 
       .andExpect(view().name("/bluebutton/loinccodecategory/edit"));
    }
    
    @Test
	@WithMockUser(username="user", roles={"BLUEBUTTON_ADMIN"})
    public void listShouldSimplyLoadPage() throws Exception {
       mockMvc.perform(get("/loinccodecategory/list"))
       .andExpect(status().isOk())
       .andExpect(view().name("/bluebutton/loinccodecategory/list"));
    }
    
    @Test
    public void indexShouldDisplayListPage() throws Exception {
       mockMvc.perform(get("/loinccodecategory/"))
       .andExpect(status().isOk())
       .andExpect(view().name("/bluebutton/loinccodecategory/list"));
    }
    
    @Test
	@WithMockUser(username="user", roles={"BLUEBUTTON_ADMIN"})
    public void listAltShouldLoadListOfLoincCodeCategorys() throws Exception {
       mockMvc.perform(get("/loinccodecategory/list_alt"))
       .andExpect(status().isOk())
       .andExpect(model().attributeExists("loincCodeCategoryList")) 
       .andExpect(view().name("/bluebutton/loinccodecategory/list_alt"));
    }
    
    
       /*   	  
    @Test
    public void saveShouldPersistAndRedirectToListView() throws Exception {
       int count = bluebuttonDaoService.getLoincCodeCategoryService().list().size();
       
       mockMvc.perform(post("/loinccodecategory/save")).andExpect(status().is3xxRedirection()).andExpect(view().name("redirect:/loinccodecategory/list"));   
       
       assertEquals("LoincCodeCategory count should increase by 1", count +1 , bluebuttonDaoService.getLoincCodeCategoryService().list().size());
	}
  */
    @Test
	@WithMockUser(username="user", roles={"BLUEBUTTON_ADMIN"})
    public void editShouldLoadObjectAndDisplayForm() throws Exception {
    	mockMvc.perform(get("/loinccodecategory/edit").param("id", firstLoincCodeCategory.getId().toString()))
         .andExpect(status().isOk())
         .andExpect(model().attributeExists("loincCodeCategory")) 
         .andExpect(view().name("/bluebutton/loinccodecategory/edit"));
    }
    
    @Test
    public void showShouldLoadAndDisplayObject() throws Exception {
    	mockMvc.perform(get("/loinccodecategory/show").param("id", firstLoincCodeCategory.getId().toString()))
         .andExpect(status().isOk())
         .andExpect(model().attributeExists("loincCodeCategory")) 
         .andExpect(view().name("/bluebutton/loinccodecategory/show"));
    }
    
    @Test
	@WithMockUser(username="user", roles={"BLUEBUTTON_ADMIN"})
    public void deleteGetShouldLoadAndDisplayYesNoButtons() throws Exception {
    	mockMvc.perform(get("/loinccodecategory/delete").param("id", firstLoincCodeCategory.getId().toString()))
         .andExpect(status().isOk())
         .andExpect(model().attributeExists("loincCodeCategory")) 
         .andExpect(view().name("/bluebutton/loinccodecategory/delete"));
    }
    
    @Test
	@WithMockUser(username="user", roles={"BLUEBUTTON_ADMIN"})
    public void deletePostSubmitYesShouldDeleteAndRedirectToListView() throws Exception {
        int count = bluebuttonDaoService.getLoincCodeCategoryService().list().size();

       mockMvc.perform(post("/loinccodecategory/delete").param("id", firstLoincCodeCategory.getId().toString())
       .param("submit", "Yes")).andExpect(status().is3xxRedirection()).andExpect(view().name("redirect:/loinccodecategory/list"));  
       
       assertEquals("count should decrease by 1", count - 1 , bluebuttonDaoService.getLoincCodeCategoryService().list().size());
    }
    
    @Test
	@WithMockUser(username="user", roles={"BLUEBUTTON_ADMIN"})
    public void deletePostSubmitNoShouldNotDeleteAndRedirectToListView() throws Exception {
        int count = bluebuttonDaoService.getLoincCodeCategoryService().list().size();

       mockMvc.perform(post("/loinccodecategory/delete").param("id", firstLoincCodeCategory.getId().toString())
       .param("submit", "No")).andExpect(status().is3xxRedirection()).andExpect(view().name("redirect:/loinccodecategory/list"));  
       
       assertEquals("count should NOT decrease by 1", count , bluebuttonDaoService.getLoincCodeCategoryService().list().size());
    }
      
    @Test
    public void defaultDatatableShouldReturnJSONDataWith10Rows() throws Exception {
    	mockMvc.perform(get("/loinccodecategory/datatable")
			.param("display", "list")
			.param("search[value]", "")
			.param("search[regex]", "false")
			.param("length", "10")
			.param("start", "0")
			.param("columnCount", "4")
			.param("draw", "1")
			.param("individualSearch", "true")
			.param("columns[0][data]","0").param("columns[0][name]","urls").param("columns[0][searchable]","false").param("columns[0][orderable]","false").param("columns[0][search][regex]","false").param("columns[0][search][value]","")
						.param("columns[1][data]","1").param("columns[1][name]","loincCode").param("columns[1][searchable]","true").param("columns[1][orderable]","true").param("columns[1][search][regex]","false").param("columns[1][search][value]","")
						.param("columns[2][data]","2").param("columns[2][name]","name").param("columns[2][searchable]","true").param("columns[2][orderable]","true").param("columns[2][search][regex]","false").param("columns[2][search][value]","")
						.param("columns[3][data]","3").param("columns[3][name]","rootCategoryName").param("columns[3][searchable]","true").param("columns[3][orderable]","true").param("columns[3][search][regex]","false").param("columns[3][search][value]","")
						.param("columns[4][data]","4").param("columns[4][name]","subrootCategoryName").param("columns[4][searchable]","true").param("columns[4][orderable]","true").param("columns[4][search][regex]","false").param("columns[4][search][value]","")
						.accept(MediaType.APPLICATION_JSON))
    	.andExpect(status().isOk())
    	.andExpect(content().contentType("application/json"))
    	.andExpect(jsonPath("$.recordsTotal", is(bluebuttonDaoService.getLoincCodeCategoryService().list().size())))
    	.andExpect(jsonPath("$.recordsFiltered", is(bluebuttonDaoService.getLoincCodeCategoryService().list().size())))
    	.andExpect(jsonPath("$.draw", is("1")))
    	// max # of returned data rows should be 10 per "length" value
    	.andExpect(jsonPath("$.data", hasSize(is(10))))
    	.andExpect(jsonPath("$.data[0][0]", containsString("show?")))
		.andExpect(jsonPath("$.data[0][0]", containsString("edit?")))
		.andExpect(jsonPath("$.data[0][0]", containsString("delete?")))
        ;
    }
    	  
    @Test
    public void defaultDatatableShouldReturnErrorTextForBogusColumnName() throws Exception {
    	mockMvc.perform(get("/loinccodecategory/datatable")
			.param("display", "list")
			.param("search[value]", "")
			.param("search[regex]", "false")
			.param("length", "10")
			.param("start", "1")
			.param("columnCount", "1")
			.param("draw", "1")
			.param("individualSearch", "true")
			.param("columns[0][data]","0").param("columns[0][name]","asdfasdf").param("columns[0][searchable]","true").param("columns[0][orderable]","true").param("columns[0][search][regex]","false").param("columns[0][search][value]","")
			.accept(MediaType.APPLICATION_JSON))
    	.andExpect(status().isOk())
    	.andExpect(content().contentType("application/json"))
    	.andExpect(jsonPath("$.recordsTotal", is(bluebuttonDaoService.getLoincCodeCategoryService().list().size())))
    	.andExpect(jsonPath("$.recordsFiltered", is(bluebuttonDaoService.getLoincCodeCategoryService().list().size())))
    	.andExpect(jsonPath("$.draw", is("1")))
    	.andExpect(jsonPath("$.data", hasSize(is(10))))
    	.andExpect(jsonPath("$.data[0][0]", is("[error: column asdfasdf not supported]")))
    	;
    }    
    	  
    @Test
    public void defaultDatatableShouldReturnException() throws Exception {
    	mockMvc.perform(get("/loinccodecategory/datatable")
			.param("display", "list")
			.param("search[value]", "")
			.param("search[regex]", "false")
			.param("length", "10")
			.param("start", "1")
			.param("columnCount", "1")
			.param("draw", "1")
			.param("individualSearch", "true")
			.param("order[0][column]","1").param(".order[0][dir]", "asc")
			.accept(MediaType.APPLICATION_JSON))
    	.andExpect(status().isOk())
    	.andExpect(content().contentType("application/json"))
    	.andExpect(jsonPath("$.recordsTotal", is(0)))
    	.andExpect(jsonPath("$.recordsFiltered", is(0)))
    	.andExpect(jsonPath("$.draw", is("1")))
    	.andExpect(jsonPath("$.data", IsNull.nullValue()))
    //	.andExpect(jsonPath("$.error", is("")))
    	;
    }      
    
    @Test
	@WithMockUser(username="user", roles={"BLUEBUTTON_ADMIN"})
    public void csvImportShouldDisplayFileUploadForm() throws Exception {
    	mockMvc.perform(get("/loinccodecategory/import"))
         .andExpect(status().isOk())
         .andExpect(view().name("/bluebutton/loinccodecategory/import"));
    }
    
    @Test
	@WithMockUser(username="user", roles={"BLUEBUTTON_ADMIN"})
    public void CSVImportShouldInsertRecordsIntoDatabase() throws Exception {
    	assertEquals( 20, this.bluebuttonDaoService.getLoincCodeCategoryService().count() );
    	File file = new File("src/test/resources/csv/LOINC_250_MULTI-AXIAL_HIERARCHY-for-testing.CSV");
    	FileInputStream fis = new FileInputStream(file);
    	MockMultipartFile mmFile = new MockMultipartFile("file", fis);
       // MockMultipartFile mmFile = new MockMultipartFile("file", "test-file.csv", MediaType.TEXT_PLAIN_VALUE,fis.);
        
        mockMvc.perform(((MockMultipartHttpServletRequestBuilder) fileUpload("/loinccodecategory/import")).file(mmFile))
        .andExpect(status().is3xxRedirection())
        .andExpect(view().name(containsString("redirect:/loinccodecategory/")));   
        
	//	this.bluebuttonDaoService.getLabTestService().importCSV(new FileInputStream(file));
		
    	assertEquals( 94, this.bluebuttonDaoService.getLoincCodeCategoryService().count() );
    	
    	LoincCodeCategory lccRoot = this.bluebuttonDaoService.getLoincCodeCategoryService().findByProperty("loincCode", "LP31755-9");
    	assertEquals("Microbiology", lccRoot.getName());
    	assertNull(lccRoot.getRootCategoryName());
    	assertNull(lccRoot.getSubrootCategoryName());
    	
    	LoincCodeCategory lccHEMOGLOBINA1C = this.bluebuttonDaoService.getLoincCodeCategoryService().findByProperty("loincCode", "4548-4");
    	assertEquals("Hgb A1c MFr Bld", lccHEMOGLOBINA1C.getName());
    	assertEquals("Hematology", lccHEMOGLOBINA1C.getRootCategoryName());
    	assertEquals("Hematology", lccHEMOGLOBINA1C.getSubrootCategoryName());
    	
    	LoincCodeCategory lccBacteria = this.bluebuttonDaoService.getLoincCodeCategoryService().findByProperty("loincCode", "LP98185-9");
    	assertEquals("Bacteria", lccBacteria.getName());
    	assertEquals("Microbiology", lccBacteria.getRootCategoryName());
    	assertEquals("Microorganism", lccBacteria.getSubrootCategoryName());
    	
    /*	LoincCodeCategory lccBacteriaTwo = this.bluebuttonDaoService.getLoincCodeCategoryService().findByProperty("loincCode", "LP14082-9");
    	assertEquals("Bacteria", lccBacteriaTwo.getName());
    	assertEquals("Microbiology", lccBacteriaTwo.getRootCategoryName());
    	assertEquals("Microorganism", lccBacteriaTwo.getSubrootCategoryName()); */
    	
    	LoincCodeCategory lccBacteriaPericardiafluid = this.bluebuttonDaoService.getLoincCodeCategoryService().findByProperty("loincCode", "LP52257-0");
    	assertEquals("Bacteria | Pericardial fluid", lccBacteriaPericardiafluid.getName());
    	assertEquals("Microbiology", lccBacteriaPericardiafluid.getRootCategoryName());
    	assertEquals("Microorganism", lccBacteriaPericardiafluid.getSubrootCategoryName());
    	
    }
    
}