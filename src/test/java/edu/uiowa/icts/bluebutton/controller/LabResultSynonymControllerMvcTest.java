
package edu.uiowa.icts.bluebutton.controller;

/*
 * #%L
 * blue-button Spring MVC Web App
 * %%
 * Copyright (C) 2014 - 2015 University of Iowa Institute for Clinical and Translational Science (ICTS)
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */


import java.io.FileNotFoundException;
import java.io.IOException;

import org.hamcrest.core.IsNull;
import org.junit.Before;
import org.junit.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.security.test.context.support.WithMockUser;

import edu.uiowa.icts.bluebutton.dao.*;
import edu.uiowa.icts.bluebutton.domain.*;
import static org.hamcrest.Matchers.containsString;
import static org.hamcrest.Matchers.hasSize;
import static org.hamcrest.Matchers.is;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertThat;
import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.user;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

/**
 * Generated by Protogen
 * @since Tue Apr 14 11:39:11 CDT 2015
 */
public class LabResultSynonymControllerMvcTest extends AbstractControllerMVCTests {
    
    private LabResultSynonym firstLabResultSynonym;
    
    @Before
    public void setup() throws FileNotFoundException, IOException  {
        super.setup();

              // add 20 records to test database
        for(int x=1; x<21; x++){
        	LabResultSynonym labResultSynonym = new LabResultSynonym(x,"Test","Test Also","Test Panel");
        	bluebuttonDaoService.getLabResultSynonymService().save(labResultSynonym);
	        if (x == 1){
	        	// use this ID for update, show, and delete assertions
	        	firstLabResultSynonym = labResultSynonym;
	        }
        }   
    }
    
    @Test
    public void indexWithUserShouldSimplyLoadPage() throws Exception {
       mockMvc.perform(get("/labresultsynonym/"))
       .andExpect(status().isOk())
       .andExpect(view().name("/bluebutton/labresultsynonym/list"));
    }
    
    
    @Test
    @WithMockUser(username="user", roles={"BLUEBUTTON_ADMIN"})
    public void addShouldDisplayNewLabResultSynonymForm() throws Exception {
       mockMvc.perform(get("/labresultsynonym/add"))
       .andExpect(status().isOk())
       .andExpect(model().attributeExists("labResultSynonym")) 
       .andExpect(view().name("/bluebutton/labresultsynonym/edit"));
    }
    
    @Test
    @WithMockUser(username="user", roles={"BLUEBUTTON_ADMIN"})
    public void listShouldSimplyLoadPage() throws Exception {
       mockMvc.perform(get("/labresultsynonym/list"))
       .andExpect(status().isOk())
       .andExpect(view().name("/bluebutton/labresultsynonym/list"));
    }
    
    @Test
    @WithMockUser(username="user", roles={"BLUEBUTTON_ADMIN"})
    public void indexShouldDisplayListPage() throws Exception {
       mockMvc.perform(get("/labresultsynonym/"))
       .andExpect(status().isOk())
       .andExpect(view().name("/bluebutton/labresultsynonym/list"));
    }
    
    @Test
    @WithMockUser(username="user", roles={"BLUEBUTTON_ADMIN"})
    public void listAltShouldLoadListOfLabResultSynonyms() throws Exception {
       mockMvc.perform(get("/labresultsynonym/list_alt"))
       .andExpect(status().isOk())
       .andExpect(model().attributeExists("labResultSynonymList")) 
       .andExpect(view().name("/bluebutton/labresultsynonym/list_alt"));
    }
       	  
    @Test
    @WithMockUser(username="user", roles={"BLUEBUTTON_ADMIN"})
    public void saveShouldPersistAndRedirectToListView() throws Exception {
       int count = bluebuttonDaoService.getLabResultSynonymService().list().size();
       mockMvc.perform(post("/labresultsynonym/save").param("officialName", "Test").param("unofficialName", "Test").param("panel", "Test Panel")).andExpect(status().is3xxRedirection()).andExpect(view().name("redirect:/labresultsynonym/list"));   
       assertEquals("LabResultSynonym count should increase by 1", count +1 , bluebuttonDaoService.getLabResultSynonymService().list().size());
	}
    
    @Test
    @WithMockUser(username="user", roles={"BLUEBUTTON_ADMIN"})
    public void saveShouldPersistShouldNotInsertWhenNoDataEntered() throws Exception {
       int count = bluebuttonDaoService.getLabResultSynonymService().list().size();
       mockMvc.perform(post("/labresultsynonym/save")).andExpect(status().is2xxSuccessful());   
       assertEquals("LabResultSynonym count should not have increased increase by 1", count, bluebuttonDaoService.getLabResultSynonymService().list().size());
	}
    
    @Test
    @WithMockUser(username="user", roles={"BLUEBUTTON_ADMIN"})
    public void saveShouldPersistAndRedirectToListViewAndTrimEnteredData() throws Exception{
    	int count = bluebuttonDaoService.getLabResultSynonymService().list().size();
        mockMvc.perform(post("/labresultsynonym/save").param("officialName", "  Test  ").param("unofficialName", "  Test Also  ").param("panel", "  Test Panel  ")).andExpect(status().is3xxRedirection()).andExpect(view().name("redirect:/labresultsynonym/list"));   
        assertEquals("LabResultSynonym count should increase by 1", count +1 , bluebuttonDaoService.getLabResultSynonymService().list().size());
        LabResultSynonym lrs = this.bluebuttonDaoService.getLabResultSynonymService().list().get(count);
        assertEquals("Test", lrs.getOfficialName());
        assertEquals("Test Also", lrs.getUnofficialName());
        assertEquals("Test Panel", lrs.getPanel());
    }
  
    @Test
    @WithMockUser(username="user", roles={"BLUEBUTTON_ADMIN"})
    public void editShouldLoadObjectAndDisplayForm() throws Exception {
    	mockMvc.perform(get("/labresultsynonym/edit").param("labResultSynonymId", firstLabResultSynonym.getLabResultSynonymId().toString()))
         .andExpect(status().isOk())
         .andExpect(model().attributeExists("labResultSynonym")) 
         .andExpect(view().name("/bluebutton/labresultsynonym/edit"));
    }
    
    @Test
    public void showShouldLoadAndDisplayObject() throws Exception {
    	mockMvc.perform(get("/labresultsynonym/show").param("labResultSynonymId", firstLabResultSynonym.getLabResultSynonymId().toString()))
         .andExpect(status().isOk())
         .andExpect(model().attributeExists("labResultSynonym")) 
         .andExpect(view().name("/bluebutton/labresultsynonym/show"));
    }
    
    @Test
    @WithMockUser(username="user", roles={"BLUEBUTTON_ADMIN"})
    public void deleteGetShouldLoadAndDisplayYesNoButtons() throws Exception {
    	mockMvc.perform(get("/labresultsynonym/delete").param("labResultSynonymId", firstLabResultSynonym.getLabResultSynonymId().toString()))
         .andExpect(status().isOk())
         .andExpect(model().attributeExists("labResultSynonym")) 
         .andExpect(view().name("/bluebutton/labresultsynonym/delete"));
    }
    
    @Test
    @WithMockUser(username="user", roles={"BLUEBUTTON_ADMIN"})
    public void deletePostSubmitYesShouldDeleteAndRedirectToListView() throws Exception {
        int count = bluebuttonDaoService.getLabResultSynonymService().list().size();

       mockMvc.perform(post("/labresultsynonym/delete").param("labResultSynonymId", firstLabResultSynonym.getLabResultSynonymId().toString())
       .param("submit", "Yes")).andExpect(status().is3xxRedirection()).andExpect(view().name("redirect:/labresultsynonym/list"));  
       
       assertEquals("count should decrease by 1", count - 1 , bluebuttonDaoService.getLabResultSynonymService().list().size());
    }
    
    @Test
    @WithMockUser(username="user", roles={"BLUEBUTTON_ADMIN"})
    public void deletePostSubmitNoShouldNotDeleteAndRedirectToListView() throws Exception {
        int count = bluebuttonDaoService.getLabResultSynonymService().list().size();

       mockMvc.perform(post("/labresultsynonym/delete").param("labResultSynonymId", firstLabResultSynonym.getLabResultSynonymId().toString())
       .param("submit", "No")).andExpect(status().is3xxRedirection()).andExpect(view().name("redirect:/labresultsynonym/list"));  
       
       assertEquals("count should NOT decrease by 1", count , bluebuttonDaoService.getLabResultSynonymService().list().size());
    }
      
    public void defaultDatatableShouldReturnJSONDataWith10Rows() throws Exception {
    	mockMvc.perform(get("/labresultsynonym/datatable")
			.param("display", "list")
			.param("search[value]", "")
			.param("search[regex]", "false")
			.param("length", "10")
			.param("start", "0")
			.param("columnCount", "3")
			.param("draw", "1")
			.param("individualSearch", "true")
			.param("columns[0][data]","0").param("columns[0][name]","urls").param("columns[0][searchable]","false").param("columns[0][orderable]","false").param("columns[0][search][regex]","false").param("columns[0][search][value]","")
						.param("columns[1][data]","1").param("columns[1][name]","officialName").param("columns[1][searchable]","true").param("columns[1][orderable]","true").param("columns[1][search][regex]","false").param("columns[1][search][value]","")
						.param("columns[2][data]","2").param("columns[2][name]","panel").param("columns[2][searchable]","true").param("columns[2][orderable]","true").param("columns[2][search][regex]","false").param("columns[2][search][value]","")
						.param("columns[3][data]","3").param("columns[3][name]","unofficialName").param("columns[3][searchable]","true").param("columns[3][orderable]","true").param("columns[3][search][regex]","false").param("columns[3][search][value]","")
						.accept(MediaType.APPLICATION_JSON))
    	.andExpect(status().isOk())
    	.andExpect(content().contentType("application/json"))
    	.andExpect(jsonPath("$.recordsTotal", is(bluebuttonDaoService.getLabResultSynonymService().list().size())))
    	.andExpect(jsonPath("$.recordsFiltered", is(bluebuttonDaoService.getLabResultSynonymService().list().size())))
    	.andExpect(jsonPath("$.draw", is("1")))
    	// max # of returned data rows should be 10 per "length" value
    	.andExpect(jsonPath("$.data", hasSize(is(10))))
    	.andExpect(jsonPath("$.data[0][0]", containsString("show?")))
		.andExpect(jsonPath("$.data[0][0]", containsString("edit?")))
		.andExpect(jsonPath("$.data[0][0]", containsString("delete?")))
        ;
    }
    	  

    public void defaultDatatableShouldReturnErrorTextForBogusColumnName() throws Exception {
    	mockMvc.perform(get("/labresultsynonym/datatable")
			.param("display", "list")
			.param("search[value]", "")
			.param("search[regex]", "false")
			.param("length", "10")
			.param("start", "1")
			.param("columnCount", "1")
			.param("draw", "1")
			.param("individualSearch", "true")
			.param("columns[0][data]","0").param("columns[0][name]","asdfasdf").param("columns[0][searchable]","true").param("columns[0][orderable]","true").param("columns[0][search][regex]","false").param("columns[0][search][value]","")
			.accept(MediaType.APPLICATION_JSON))
    	.andExpect(status().isOk())
    	.andExpect(content().contentType("application/json"))
    	.andExpect(jsonPath("$.recordsTotal", is(bluebuttonDaoService.getLabResultSynonymService().list().size())))
    	.andExpect(jsonPath("$.recordsFiltered", is(bluebuttonDaoService.getLabResultSynonymService().list().size())))
    	.andExpect(jsonPath("$.draw", is("1")))
    	.andExpect(jsonPath("$.data", hasSize(is(10))))
    	.andExpect(jsonPath("$.data[0].error", is("[error: column asdfasdf not supported]")))
    	;
    }    
    	  
    public void defaultDatatableShouldReturnException() throws Exception {
    	mockMvc.perform(get("/labresultsynonym/datatable")
			.param("display", "list")
			.param("search[value]", "")
			.param("search[regex]", "false")
			.param("length", "10")
			.param("start", "1")
			.param("columnCount", "1")
			.param("draw", "1")
			.param("individualSearch", "true")
			.param("order[0][column]","1").param(".order[0][dir]", "asc")
			.accept(MediaType.APPLICATION_JSON))
    	.andExpect(status().isOk())
    	.andExpect(content().contentType("application/json"))
    	.andExpect(jsonPath("$.recordsTotal", is(0)))
    	.andExpect(jsonPath("$.recordsFiltered", is(0)))
    	.andExpect(jsonPath("$.draw", is("1")))
    	.andExpect(jsonPath("$.data", hasSize(is(0))))
    //	.andExpect(jsonPath("$.error", is("")))
    	;
    }      
          
    
}
