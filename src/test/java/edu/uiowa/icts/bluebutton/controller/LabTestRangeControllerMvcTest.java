package edu.uiowa.icts.bluebutton.controller;

/*
 * #%L
 * blue-button Spring MVC Web App
 * %%
 * Copyright (C) 2014 - 2015 University of Iowa Institute for Clinical and Translational Science (ICTS)
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */


import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.mock.web.MockMultipartFile;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMultipartHttpServletRequestBuilder;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import edu.uiowa.icts.bluebutton.dao.*;
import edu.uiowa.icts.bluebutton.domain.*;
import static org.hamcrest.Matchers.containsString;
import static org.hamcrest.Matchers.hasSize;
import static org.hamcrest.Matchers.is;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertThat;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

/**
 * Generated by Protogen
 * @since Wed Oct 29 09:27:59 CDT 2014
 */
public class LabTestRangeControllerMvcTest extends AbstractControllerMVCTests {
	
    private LabTestRange firstLabTestRange;
    private LabTest labtest;	
    
    @Before
    public void setup() throws FileNotFoundException, IOException {
        super.setup();
        this.labtest = new LabTest();
        this.labtest.setName("lab test for coders");
        this.labtest.setLabTestId(1);
        this.bluebuttonDaoService.getLabTestService().save(labtest);
        
              // add 20 records to test database
        for(int x=1; x<21; x++){
        	LabTestRange labTestRange = new LabTestRange();
        	labTestRange.setLabTestRangeId(500 + x);
        	labTestRange.setLabTest(labtest);
        	bluebuttonDaoService.getLabTestRangeService().save(labTestRange);
        	
        	this.labtest.getLabTestRanges().add(labTestRange);
        	this.bluebuttonDaoService.getLabTestService().save(labtest);
	        if (x == 1){
	        	// use this ID for update, show, and delete assertions
	        	firstLabTestRange = labTestRange;
	        }
        }   
        this.bluebuttonDaoService.getClinicalDocumentService().getSession().flush();
        this.bluebuttonDaoService.getClinicalDocumentService().getSession().clear();
          }

    @Test
    @WithMockUser(username="user", roles={"BLUEBUTTON_ADMIN"})
    public void addShouldDisplayNewLabTestRangeForm() throws Exception {
       mockMvc.perform(get("/labtestrange/add"))
       .andExpect(status().isOk())
       .andExpect(model().attributeExists("labTestRange")) 
       .andExpect(view().name("/bluebutton/labtestrange/edit"));
    }
    
    @Test
    @WithMockUser(username="user", roles={"BLUEBUTTON_ADMIN"})
    public void listShouldSimplyLoadPage() throws Exception {
       mockMvc.perform(get("/labtestrange/list"))
       .andExpect(status().isOk())
       .andExpect(view().name("/bluebutton/labtestrange/list"));
    }
    
    @Test
    public void indexShouldDisplayListPage() throws Exception {
       mockMvc.perform(get("/labtestrange/"))
       .andExpect(status().isOk())
       .andExpect(view().name("/bluebutton/labtestrange/list"));
    }
    
    @Test
    @WithMockUser(username="user", roles={"BLUEBUTTON_ADMIN"})
    public void listAltShouldLoadListOfLabTestRanges() throws Exception {
       mockMvc.perform(get("/labtestrange/list_alt"))
       .andExpect(status().isOk())
       .andExpect(model().attributeExists("labTestRangeList")) 
       .andExpect(view().name("/bluebutton/labtestrange/list_alt"));
    }
    
    
          	  
//    @Test
//    public void saveShouldPersistAndRedirectToListView() throws Exception {
//       int count = bluebuttonDaoService.getLabTestRangeService().list().size();
//       
//       mockMvc.perform(post("/labtestrange/save").param("labTestRange.labTestRangeId", this.firstLabTestRange.getLabTestRangeId().toString()).param("labTest.labTestId", this.labtest.getLabTestId().toString())).andExpect(status().is3xxRedirection()).andExpect(view().name("redirect:/labtestrange/list"));   
//       
//       assertEquals("LabTestRange count should increase by 1", count +1 , bluebuttonDaoService.getLabTestRangeService().list().size());
//	}
  
    @Test
    @WithMockUser(username="user", roles={"BLUEBUTTON_ADMIN"})
    public void editShouldLoadObjectAndDisplayForm() throws Exception {
    	mockMvc.perform(get("/labtestrange/edit").param("labTestRangeId", firstLabTestRange.getLabTestRangeId().toString()))
         .andExpect(status().isOk())
         .andExpect(model().attributeExists("labTestRange")) 
         .andExpect(view().name("/bluebutton/labtestrange/edit"));
    }
    
    @Test
    public void showShouldLoadAndDisplayObject() throws Exception {
    	mockMvc.perform(get("/labtestrange/show").param("labTestRangeId", firstLabTestRange.getLabTestRangeId().toString()))
         .andExpect(status().isOk())
         .andExpect(model().attributeExists("labTestRange")) 
         .andExpect(view().name("/bluebutton/labtestrange/show"));
    }
    
    @Test
    @WithMockUser(username="user", roles={"BLUEBUTTON_ADMIN"})
    public void deleteGetShouldLoadAndDisplayYesNoButtons() throws Exception {
    	mockMvc.perform(get("/labtestrange/delete").param("labTestRangeId", firstLabTestRange.getLabTestRangeId().toString()))
         .andExpect(status().isOk())
         .andExpect(model().attributeExists("labTestRange")) 
         .andExpect(view().name("/bluebutton/labtestrange/delete"));
    }
    
    @Test
    @WithMockUser(username="user", roles={"BLUEBUTTON_ADMIN"})
    public void deletePostSubmitYesShouldDeleteAndRedirectToListView() throws Exception {
        int count = bluebuttonDaoService.getLabTestRangeService().list().size();

       mockMvc.perform(post("/labtestrange/delete").param("labTestRangeId", firstLabTestRange.getLabTestRangeId().toString())
       .param("submit", "Yes")).andExpect(status().is3xxRedirection()).andExpect(view().name("redirect:/labtestrange/list"));  
       
       assertEquals("count should decrease by 1", count - 1 , bluebuttonDaoService.getLabTestRangeService().list().size());
    }
    
    @Test
    @WithMockUser(username="user", roles={"BLUEBUTTON_ADMIN"})
    public void deletePostSubmitNoShouldNotDeleteAndRedirectToListView() throws Exception {
        int count = bluebuttonDaoService.getLabTestRangeService().list().size();

       mockMvc.perform(post("/labtestrange/delete").param("labTestRangeId", firstLabTestRange.getLabTestRangeId().toString())
       .param("submit", "No")).andExpect(status().is3xxRedirection()).andExpect(view().name("redirect:/labtestrange/list"));  
       
       assertEquals("count should NOT decrease by 1", count , bluebuttonDaoService.getLabTestRangeService().list().size());
    }
      
    @Test
    public void defaultDatatableShouldReturnJSONDataWith10Rows() throws Exception {
    	mockMvc.perform(get("/labtestrange/datatable")
			.param("display", "list")
			.param("search[value]", "")
			.param("search[regex]", "false")
			.param("length", "10")
			.param("start", "0")
			.param("columnCount", "6")
			.param("draw", "1")
			.param("individualSearch", "true")
						.param("columns[0][data]","0").param("columns[0][name]","labTest").param("columns[0][searchable]","true").param("columns[0][orderable]","true").param("columns[0][search][regex]","false").param("columns[0][search][value]","")
						.param("columns[1][data]","1").param("columns[1][name]","maxAgeYears").param("columns[1][searchable]","true").param("columns[1][orderable]","true").param("columns[1][search][regex]","false").param("columns[1][search][value]","")
						.param("columns[2][data]","2").param("columns[2][name]","maxNormal").param("columns[2][searchable]","true").param("columns[2][orderable]","true").param("columns[2][search][regex]","false").param("columns[2][search][value]","")
						.param("columns[3][data]","3").param("columns[3][name]","minAgeYears").param("columns[3][searchable]","true").param("columns[3][orderable]","true").param("columns[3][search][regex]","false").param("columns[3][search][value]","")
						.param("columns[4][data]","4").param("columns[4][name]","minNormal").param("columns[4][searchable]","true").param("columns[4][orderable]","true").param("columns[4][search][regex]","false").param("columns[4][search][value]","")
						.param("columns[5][data]","5").param("columns[5][name]","sex").param("columns[5][searchable]","true").param("columns[5][orderable]","true").param("columns[5][search][regex]","false").param("columns[5][search][value]","")
						.accept(MediaType.APPLICATION_JSON))
    	.andExpect(status().isOk())
    	.andExpect(content().contentType("application/json"))
    	.andExpect(jsonPath("$.recordsTotal", is(bluebuttonDaoService.getLabTestRangeService().list().size())))
    	.andExpect(jsonPath("$.recordsFiltered", is(bluebuttonDaoService.getLabTestRangeService().list().size())))
    	.andExpect(jsonPath("$.draw", is("1")))
    	// max # of returned data rows should be 10 per "length" value
    	.andExpect(jsonPath("$.data", hasSize(is(10))))
    	.andExpect(jsonPath("$.data[0][0]", is("lab test for coders")))
        ;
    }
    	  
    @Test
    @WithMockUser(username="user", roles={"BLUEBUTTON_ADMIN"})
    public void csvImportShouldDisplayFileUploadForm() throws Exception {
    	mockMvc.perform(get("/labtestrange/import"))
         .andExpect(status().isOk())
         .andExpect(view().name("/bluebutton/labtestrange/import"));
    }
    
    
    @Test
    @WithMockUser(username="user", roles={"BLUEBUTTON_ADMIN"})
    public void CSVImportShouldInsertRecordsIntoDatabase() throws Exception {
    	assertEquals( 20, this.bluebuttonDaoService.getLabTestRangeService().count() );
    	File file = new File("src/test/resources/csv/lab-test-ranges.csv");
    	FileInputStream fis = new FileInputStream(file);
    	MockMultipartFile mmFile = new MockMultipartFile("file", fis);
        
        mockMvc.perform(((MockMultipartHttpServletRequestBuilder) fileUpload("/labtestrange/import")).file(mmFile))
        .andExpect(status().is3xxRedirection())
        .andExpect(view().name(containsString("redirect:/labtestrange/")));   
        
		
        assertEquals( 50, this.bluebuttonDaoService.getLabTestRangeService().count() );
        
    	LabTestRange labTestRange = this.bluebuttonDaoService.getLabTestRangeService().findById(1);
    	assertEquals(new Integer(1), labTestRange.getLabTest().getLabTestId());
    	assertEquals("FM", labTestRange.getSex());
    	assertEquals(new Double(0.0), labTestRange.getMinAgeYears());
    	assertEquals(new Double(127.0),labTestRange.getMaxAgeYears());
    	assertEquals(new Double(0.0),labTestRange.getMinNormal());
    	assertEquals(new Double(0.0),labTestRange.getMaxNormal());
        
    }
          
    
}