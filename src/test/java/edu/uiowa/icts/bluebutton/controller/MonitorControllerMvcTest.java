package edu.uiowa.icts.bluebutton.controller;

/*
 * #%L
 * blue-button Spring MVC Web App
 * %%
 * Copyright (C) 2014 - 2015 University of Iowa Institute for Clinical and Translational Science (ICTS)
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */

import java.io.FileNotFoundException;
import java.io.IOException;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import edu.uiowa.icts.bluebutton.dao.BluebuttonDaoService;
import edu.uiowa.icts.bluebutton.dao.ClinicalDocumentService;
import edu.uiowa.icts.bluebutton.domain.ClinicalDocument;
import edu.uiowa.icts.bluebutton.domain.Person;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

/**
 * Generated by Protogen
 * @since Fri Aug 01 10:04:19 CDT 2014
 */
public class MonitorControllerMvcTest extends AbstractControllerMVCTests {
	
    @Before
    public void setup() throws FileNotFoundException, IOException {
        super.setup();
    }

    @Test
    public void monitorIndexShouldReturnSuccessIfDataInTheDatabase() throws Exception {
    	Person p = new Person();
        p.setFirstName( "foo" );
        p.setLastName( "bar" );
        this.bluebuttonDaoService.getPersonService().save( p );
        
        // add 20 clinical documents to test database
        for(int x=1; x<21; x++){
	        ClinicalDocument cd = new ClinicalDocument();
	        String docString = "<xml><clinicaldocument>"+x+"</clinicaldocument>";
	        cd.setDocument(docString.getBytes("UTF-8"));
	        cd.setName("file"+ x+".xml");
	        cd.setPerson( p );
	        cd.setDescription("dev server #"+x);
	        this.bluebuttonDaoService.getClinicalDocumentService().saveOrUpdate(cd);
	       
        }   
        
       mockMvc.perform(get("/monitor/"))
       .andExpect(status().isOk())
       .andExpect(content().string("SUCCESS"));
    }
    
    @Test
    public void monitorIndexShouldReturnFailureIfNoDataInTheDatabase() throws Exception {
       mockMvc.perform(get("/monitor/"))
       .andExpect(status().isOk())
       .andExpect(content().string("Failed: no Clinical Documents found in the database."));
    }
    

}
